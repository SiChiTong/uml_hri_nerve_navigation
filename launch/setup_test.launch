<launch>
  <!-- This launch file is responsible for launching all of the necessesary nodes and launch files needed to setup a test. -->

  <!-- Determine whether the robot is physical or simulated-->
  <arg name="sim" default="true" />

  <!-- If in sim, enable gazebo gui or not -->
  <arg name="gui" default="true" />

  <!-- Launch in either navigate mode or mapping mode -->
  <arg name="navigate" default="true" />

  <!-- Use 3d or 2d navigation -->
  <arg name="3d" default="true" />

  <!-- Use the static global map while navigating -->
  <arg name="static_map" default="true" />

  <!-- Type of robot being spawned in -->
  <arg name="robot" default="pioneer" />

  <!-- Define the two goal points and two obstacle spawn points on the map, values are set in the level launch files-->
  <arg name="goal_a_x" default="0" />
  <arg name="goal_a_y" default="0" />
  <arg name="goal_a_z" default="0" />
  <arg name="goal_a_yaw" default="0" />

  <arg name="goal_b_x" default="0" />
  <arg name="goal_b_y" default="0" />
  <arg name="goal_b_z" default="0" />
  <arg name="goal_b_yaw" default="0" />

  <!-- Define map settings, values are set in the level launch files-->
  <arg name="world_name" />
  <arg name="world_path" />

  <!-- Determine whether an obstacle robot should be spawned in -->
  <arg name="obstacle_bot" default="false" />

  <!-- Determine whether a dynamic obstacle should be spawned in -->
  <arg name="dynamic_obstacle" default="false" />

  <!-- Name of dynamic obstacle that will be spawned in if needed -->
  <arg name="obstacle_name" default="caution_100cm_block" />

  <!-- Flip obstacle spawner -->
  <arg name="flip_obstacle" default="true" />

  <!-- Set up global goal publisher -->
  <node name="goal_publisher" pkg="uml_hri_nerve_navigation" type="goal_publisher" output="screen">
    <param name="goal_a_x" value="$(arg goal_a_x)" />
    <param name="goal_a_y" value="$(arg goal_a_y)" />
    <param name="goal_a_yaw" value="$(arg goal_a_yaw)" />
    <param name="goal_b_x" value="$(arg goal_b_x)" />
    <param name="goal_b_y" value="$(arg goal_b_y)" />
    <param name="goal_b_yaw" value="$(arg goal_b_yaw)" />
  </node>

  <!-- Setup the simulation if the test is being performed in simulation -->
  <include file="$(find uml_hri_nerve_nav_sim_resources)/launch/levels/$(arg world_path).launch" if="$(arg sim)">
    <arg name="gui" value="$(arg gui)" />
    <arg name="robot" value="$(arg robot)" />
    <arg name="obstacle_bot" value="$(arg obstacle_bot)" />
    <arg name="dynamic_obstacle" value="$(arg dynamic_obstacle)" />
    <arg name="obstacle_name" value="$(arg obstacle_name)" />
    <arg name="flip_obstacle" value="$(arg flip_obstacle)" />
  </include>

  <!-- Set a default spawn location for amcl to goal a if not in simulation -->
  <group unless="$(arg sim)">
    <param name="robot_spawn_x" value="$(arg goal_a_x)" />
    <param name="robot_spawn_y" value="$(arg goal_a_y)" />
    <param name="robot_spawn_z" value="$(arg goal_a_z)" />
    <param name="robot_spawn_yaw" value="$(arg goal_a_yaw)" />
  </group>

  <!-- Setup loggers -->
  <include file="$(find uml_hri_nerve_navigation)/launch/start_loggers.launch">
    <arg name="robot" value="$(arg robot)" />
    <arg name="level" value="$(arg world_name)" />
  </include>

  <!-- Setup dord calculator if navigating in nerve_long_hall -->
  <include file="$(find uml_hri_nerve_navigation)/launch/dord_calculator.launch" if="$(eval world_name == 'nerve_long_hall')">
    <arg name="robot" value="$(arg robot)" />
    <arg name="level" value="$(arg world_name)" />
    <arg name="goal_a_x" value="$(arg goal_a_x)" />
    <arg name="goal_a_y" value="$(arg goal_a_y)" />
    <arg name="goal_b_x" value="$(arg goal_b_x)" />
    <arg name="goal_b_y" value="$(arg goal_b_y)" />
    <arg name="obstacle_x" value="0.33057" />
    <arg name="obstacle_y" value="12.40157" />
  </include>

  <!-- Setup robot -->
  <include file="$(find uml_hri_nerve_navigation)/launch/robots/setup_$(arg robot).launch">
    <arg name="level" value="$(arg world_name)" />
    <arg name="navigate" value="$(arg navigate)" />
    <arg name="3d" value="$(arg 3d)" />
    <arg name="static_map" value="$(arg static_map)" />
  </include>

  <!-- Setup obstacle bot if wanted -->
  <group if="$(arg obstacle_bot)">
    <include file="$(find uml_hri_nerve_navigation)/launch/robots/setup_obstacle_bot.launch" if="$(arg obstacle_bot)">
      <arg name="level" value="$(arg world_name)" />
      <arg name="navigate" value="$(arg navigate)" />
    </include>

    <group unless="$(arg sim)">
      <param name="obstacle_bot_spawn_x" value="$(arg goal_b_x)" />
      <param name="obstacle_bot_spawn_y" value="$(arg goal_b_y)" />
      <param name="obstacle_bot_spawn_z" value="$(arg goal_b_z)" />
      <param name="obstacle_bot_spawn_yaw" value="$(arg goal_b_yaw)" />
    </group>

    <!-- Set up global goal publisher for the obstacle_bot and invert goals-->
    <node name="goal_publisher" pkg="uml_hri_nerve_navigation" type="goal_publisher" output="screen">
      <param name="goal_a_x" value="$(arg goal_b_x)" />
      <param name="goal_a_y" value="$(arg goal_b_y)" />
      <param name="goal_a_yaw" value="$(arg goal_b_yaw)" />
      <param name="goal_b_x" value="$(arg goal_a_x)" />
      <param name="goal_b_y" value="$(arg goal_a_y)" />
      <param name="goal_b_yaw" value="$(arg goal_a_yaw)" />
    </node>
  </group>

</launch>