<launch>
    <!-- This launch file is responsible for launching all of the necessesary nodes and launch files needed launch and execute a complete test -->
  
    <!-- Determine whether the robot is physical or simulated-->
    <arg name="sim" default="true" />
  
    <!-- If in sim, enable gazebo gui or not -->
    <arg name="gui" default="true" />
  
    <!-- Launch in either navigate mode or mapping mode -->
    <arg name="navigate" default="true" />
  
    <!-- Use 3d or 2d navigation -->
    <arg name="3d" default="true" />
  
    <!-- Type of robot being spawned in -->
    <arg name="robot" default="pioneer" />
  
    <!-- Define the two goal points and two obstacle spawn points on the map, values are set in the level launch files-->
    <arg name="spawn_x" default="0"/>
    <arg name="spawn_y" default="0"/>
    <arg name="spawn_z" default="0"/>
    <arg name="spawn_yaw" default="0"/>
  
    <arg name="goal_x" default="0"/>
    <arg name="goal_y" default="0"/>
    <arg name="goal_z" default="0"/>
    <arg name="goal_yaw" default="0"/>
  
    <!-- Define map settings, values are set in the level launch files-->
    <arg name="world_name" />
    <arg name="world_path" />
  
    <!-- Determine whether an obstacle robot should be spawned in -->
    <arg name="obstacle_bot" default="false" />
  
    <!-- Determine whether a dynamic obstacle should be spawned in -->
    <arg name="dynamic_obstacle" default="false" />
  
    <!-- Name of dynamic obstacle that will be spawned in if needed -->
    <arg name="obstacle_name" default="caution_100cm_block" />
  
    <!-- Flip obstacle spawner -->
    <arg name="flip_obstacle" default="true" />

    <!-- delay for start_test to start -->
    <arg name="start_test_delay" value="15.0" /> 

    <!-- number of iterations the robot will perform -->
    <arg name="iterations" default="1" /> 
    
    <!-- toggle whether the robot should clear the costmaps in between iterations -->
    <arg name="clear_costmaps" default="true" /> 
    
    <!-- Set up global goal publisher -->
    <node name="goal_publisher" pkg="uml_hri_nerve_navigation" type="goal_publisher" output="screen">
      <param name="goal_x" value="$(arg goal_x)" />
      <param name="goal_y" value="$(arg goal_y)" />
      <param name="spawn_x" value="$(arg spawn_x)" />
      <param name="spawn_y" value="$(arg spawn_y)" />
    </node>  
  
    <!-- Setup the simulation if the test is being performed in simulation -->
    <include file="$(find uml_hri_nerve_nav_sim_resources)/launch/levels/$(arg world_path).launch" if="$(arg sim)">
      <arg name="gui" value="$(arg gui)" />
      <arg name="robot" value="$(arg robot)"/>
      <arg name="obstacle_bot" value="$(arg obstacle_bot)"/>
      <arg name="dynamic_obstacle" value="$(arg dynamic_obstacle)"/>
      <arg name="obstacle_name" value="$(arg obstacle_name)" />
      <arg name="flip_obstacle" value="$(arg flip_obstacle)" />
    </include>
  
    <!-- Setup loggers -->
    <include file="$(find uml_hri_nerve_navigation)/launch/start_loggers.launch">
      <arg name="robot" value="$(arg robot)" />
      <arg name="level" value="$(arg world_name)" />
    </include>

    <!-- Setup dord calculator if navigating in nerve_long_hall -->
    <include file="$(find uml_hri_nerve_navigation)/launch/dord_calculator.launch" if="$(eval world_name == 'nerve_long_hall')">
      <arg name="robot" value="$(arg robot)" />
      <arg name="level" value="$(arg world_name)" />
      <arg name="goal_a_x" value="$(arg spawn_x)" />
      <arg name="goal_a_y" value="$(arg spawn_y)" />
      <arg name="goal_b_x" value="$(arg goal_x)" />
      <arg name="goal_b_y" value="$(arg goal_y)" />
      <arg name="obstacle_x" value="0.33057" />
      <arg name="obstacle_y" value="12.40157" />
    </include>

    <!-- Setup robot -->
    <include file="$(find uml_hri_nerve_navigation)/launch/robots/setup_$(arg robot).launch">
      <arg name="x" value="$(arg spawn_x)" />
      <arg name="y" value="$(arg spawn_y)" />
      <arg name="z" value="$(arg spawn_z)" />
      <arg name="yaw" value="$(arg spawn_yaw)" />
      <arg name="level" value="$(arg world_name)" />
      <arg name="navigate" value="$(arg navigate)" />
      <arg name="3d" value="$(arg 3d)" />
    </include>
  
    <!-- Setup obstacle bot if wanted -->
    <include file="$(find uml_hri_nerve_navigation)/launch/robots/setup_obstacle_bot.launch" if="$(arg obstacle_bot)">
      <arg name="x" value="$(arg goal_x)" />
      <arg name="y" value="$(arg goal_y)" />
      <arg name="z" value="$(arg spawn_z)" />
      <arg name="yaw" value="$(arg spawn_yaw)" />
      <arg name="level" value="$(arg world_name)" />
      <arg name="navigate" value="$(arg navigate)" />
    </include>

    <!-- Start moving-->
    <node name="mover_node" pkg="uml_hri_nerve_navigation" type="mover_node" output="screen" required="true" launch-prefix="bash -c 'sleep $(arg start_test_delay); $0 $@' ">
        <param name="iterations" value="$(arg iterations)" />
        <param name="clear_costmaps" value="$(arg clear_costmaps)" />
    </node>
  
  </launch>